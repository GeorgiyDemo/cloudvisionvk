# TODO –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

import vk_api
import yaml
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id

import requests
import imageprocessing


def get_settings():
    """
        –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å yaml
    """
    with open("./settings.yml", "r") as stream:
        return yaml.safe_load(stream)


class VkProcessing:
    def __init__(self, vk, user_id, path, message):

        self.path = path
        self.message = message
        self.user_id = user_id
        self.vk = vk

        if message == {}:
            self.vk.method(
                "messages.send",
                {
                    "user_id": self.user_id,
                    "random_id": get_random_id(),
                    "message": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ üëÄ",
                },
            )
        else:

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
            self.photo_uploader()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.message_sender()

    def photo_uploader(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å –ª–æ–∫–∞–ª–∏ –≤ VK
        """

        server_url = self.vk.method(
            "photos.getMessagesUploadServer", {"peer_id": self.user_id}
        )["upload_url"]
        photo_r = requests.post(
            server_url, files={"photo": open(self.path, "rb")}
        ).json()
        photo_final = self.vk.method(
            "photos.saveMessagesPhoto",
            {
                "photo": photo_r["photo"],
                "server": photo_r["server"],
                "hash": photo_r["hash"],
            },
        )[0]
        photo_str = (
            "photo" + str(photo_final["owner_id"]) + "_" + str(photo_final["id"])
        )
        self.photo_str = photo_str

    def message_sender(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VK
        """
        objects_dict = self.message

        out_str = ""
        for key, value in objects_dict.items():
            out_str += key + " " + str(int(round(value, 2) * 100)) + "%\n"

        self.vk.method(
            "messages.send",
            {
                "user_id": self.user_id,
                "random_id": get_random_id(),
                "message": "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + out_str,
                "attachment": self.photo_str,
            },
        )


class MainClass:
    def __init__(self):

        self.settings = get_settings()
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
        self.vk = vk_api.VkApi(token=self.settings["token"])
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ñ–ª–∞–≥–æ–≤ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        self.msg_dict = {
            "black": "black_text",
            "white": "white_text",
            "Black": "black_text",
            "White": "white_text",
            "adaptive": "adaptive_font",
            "Adaptive": "adaptive_font",
        }

        self.processing()

    def get_url(self, message_id):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è url –∏–∑–æ–±—Ä–∂–µ–Ω–∏—è –∏–∑ id —Å–æ–æ–±—â–µ–Ω–∏—è
        """

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω—å–∫—É –ø–æ –º–µ—Ç–æ–¥—É
        r = self.vk.method(
            "messages.getById",
            {"message_ids": message_id, "group_id": self.settings["group_id"]},
        )["items"]

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ
        all_sizes = r[0]["attachments"][0]["photo"]["sizes"]

        # –í —Ü–∏–∫–ª–µ –ø–æ –∫–∞–∂–¥–æ–π –∏—â–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        height, width, index = 0, 0, 0
        for i in range(len(all_sizes)):
            if all_sizes[i]["width"] > width and all_sizes[i]["height"] > height:
                height = all_sizes[i]["height"]
                width = all_sizes[i]["width"]
                index = i

        # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
        url = all_sizes[index]["url"]

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (—Ç.–∫. –æ–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)
        return url

    def processing(self):
        """
        –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        # –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        longpoll = VkLongPoll(self.vk)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        for event in longpoll.listen():

            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if event.type == VkEventType.MESSAGE_NEW:

                # –ï—Å–ª–∏ –æ–Ω–æ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É –¥–ª—è –±–æ—Ç–∞
                if event.to_me:

                    if event.text == "–ù–∞—á–∞—Ç—å":
                        message_str = "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ üß©\n–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–ª–∞–≥–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–ª–æ–∂–µ–Ω–∏—è:\nadaptive - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —à—Ä–∏—Ñ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏\nblack - —á–µ—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç\nwhite - –±–µ–ª—ã–π —à—Ä–∏—Ñ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
                        self.vk.method(
                            "messages.send",
                            {
                                "user_id": event.user_id,
                                "random_id": get_random_id(),
                                "message": message_str,
                            },
                        )

                    else:

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        modes_list = []
                        for key in self.msg_dict.keys():
                            if key in event.text:
                                modes_list.append(self.msg_dict[key])

                        attachments = event.attachments
                        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
                        if attachments != {} and attachments["attach1_type"] == "photo":
                            # –ü–æ–ª—É—á–∞–µ–º url –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            url = self.get_url(event.message_id)
                            # –ü–µ—Ä–µ–¥–∞–µ–º url –º–æ–¥—É–ª—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Ñ–æ—Ç–æ
                            detector = imageprocessing.PhotoProcessing(
                                url, self.settings["ttf_dir"], modes_list
                            )
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            VkProcessing(
                                self.vk, event.user_id, detector.path, detector.results
                            )


if __name__ == "__main__":
    MainClass()
