import uuid
from random import randint

import requests
from PIL import Image, ImageDraw, ImageFont
from google.cloud import vision
from vk_api.utils import get_random_id

TTF_DIR = "./MuseoSansCyrl-300.ttf"


class VkProcessing():
    def __init__(self, vk, user_id, path, message):

        self.path = path
        self.message = message
        self.user_id = user_id
        self.vk = vk

        if message == {}:
            self.vk.method('messages.send', {'user_id': self.user_id, 'random_id': get_random_id(),
                                             'message': "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ üëÄ"})
        else:

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
            self.photo_uploader()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.message_sender()

    def photo_uploader(self):

        server_url = self.vk.method('photos.getMessagesUploadServer', {'peer_id': self.user_id})["upload_url"]
        photo_r = requests.post(server_url, files={'photo': open(self.path, 'rb')}).json()
        photo_final = self.vk.method("photos.saveMessagesPhoto",
                                     {"photo": photo_r["photo"], "server": photo_r["server"], "hash": photo_r["hash"]})[
            0]
        photo_str = "photo" + str(photo_final["owner_id"]) + "_" + str(photo_final["id"])
        self.photo_str = photo_str

    def message_sender(self):
        objects_dict = self.message

        out_str = ""
        for key, value in objects_dict.items():
            out_str += key + " " + str(int(round(value, 2) * 100)) + "%\n"

        self.vk.method('messages.send', {
            'user_id': self.user_id,
            'random_id': get_random_id(),
            'message': '–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n' + out_str,
            'attachment': self.photo_str}
                       )


class PhotoProcessing():

    def __init__(self, url):
        self.url = url
        self.path = None
        self.results = None
        self.image = None
        self.get_file()
        self.localize_objects()

    def get_file(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ —Å vk
        """
        url = self.url
        path = str(uuid.uuid4()) + ".jpg"
        r = requests.get(url, stream=True)

        with open(path, 'wb') as fd:
            for chunk in r.iter_content(2000):
                fd.write(chunk)

        self.path = path

    def string_formater(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–¥–∞—á–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        """
        all_objects = self.results
        out_str = ""
        for key in all_objects:
            out_str += key + " " + str(int(round(all_objects[key], 2) * 100)) + "%\n"
        self.results = out_str

    def localize_objects(self):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å Google Cloud
        """

        path = self.path

        # –°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
        obj_of_objects = {}
        # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç boundingbox
        all_coords = []

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        im = Image.open(path)
        draw = ImageDraw.Draw(im)

        # –ö–ª–∏–µ–Ω—Ç
        client = vision.ImageAnnotatorClient()
        with open(path, 'rb') as image_file:
            content = image_file.read()
            image = vision.types.Image(content=content)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
        objects = client.object_localization(image=image).localized_object_annotations

        # –¶–∏–∫–ª –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É
        for obj in objects:

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            obj_of_objects[obj.name] = obj.score

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–∞-–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            box = [(vertex.x * im.width, vertex.y * im.height) for vertex in obj.bounding_poly.normalized_vertices]

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—É—Ä, —Ç–æ –æ–Ω –Ω–µ –≤ all_coords
            if box not in all_coords:
                all_coords.append(box)
                # –†–∞–Ω–¥–æ–º–Ω—ã–π —Ü–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
                r = lambda: randint(0, 255)
                # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é + —Ç–µ–∫—Å—Ç
                draw.line(box + [box[0]], width=5, fill='#%02X%02X%02X' % (r(), r(), r()))
                draw.text(box[0], obj.name + " " + str(obj.score), font=ImageFont.truetype(TTF_DIR, 30), fill=(0,0,0,0))
                #draw.text(box[0], obj.name + " " + str(obj.score), font=ImageFont.truetype(TTF_DIR, 30))

        im.save(path)
        self.results = obj_of_objects


def async_processing(vk, user_id, url):
    detector = PhotoProcessing(url)
    VkProcessing(vk, user_id, detector.path, detector.results)
